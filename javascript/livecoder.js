// Generated by CoffeeScript 1.3.3
(function() {
  var AcidSynth, BassSynth, Delay, ImageList, Reverb, Sample, SampleList, State,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.LC = {};

  LC.NOTES = [16.35, 17.32, 18.35, 19.45, 20.6, 21.83, 23.12, 24.5, 25.96, 27.5, 29.14, 30.87, 32.7, 34.65, 36.71, 38.89, 41.2, 43.65, 46.25, 49, 51.91, 55, 58.27, 61.74, 65.41, 69.3, 73.42, 77.78, 82.41, 87.31, 92.5, 98, 103.83, 110, 116.54, 123.47, 130.81, 138.59, 146.83, 155.56, 164.81, 174.61, 185, 196, 207.65, 220, 233.08, 246.94, 261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392, 415.3, 440, 466.16, 493.88, 523.25, 554.37, 587.33, 622.25, 659.26, 698.46, 739.99, 783.99, 830.61, 880, 932.33, 987.77, 1046.5, 1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760, 1864.66, 1975.53, 2093, 2217.46, 2349.32, 2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44, 3520, 3729.31, 3951.07, 4186.01, 4434.92, 4698.64, 4978];

  LC.LEnv = function(p, t, l, min, max, a, d, s, r) {
    console.log("ENV", t, l, min, max, a, d, s, r);
    if (s < 0 || s > 1) {
      return;
    }
    p.setValueAtTime(min, t);
    p.linearRampToValueAtTime(max, t + (a * l));
    p.linearRampToValueAtTime(min + ((max - min) * s), t + ((a + d) * l));
    p.setValueAtTime(min + ((max - min) * s), t + l - (l * r));
    return p.linearRampToValueAtTime(min, t + l);
  };

  AcidSynth = (function() {

    function AcidSynth(context) {
      var helposc;
      this.context = context;
      helposc = this.context.createOscillator();
      this.SAWTOOTH = helposc.SAWTOOTH;
      this.SQUARE = helposc.SQUARE;
      this.osc_type = this.SAWTOOTH;
      this.decay = 0.6;
      this.flt_f = 300;
      this.flt_mod = 4000;
      this.Q = 20;
    }

    AcidSynth.prototype.play = function(destination, time, length, note, volume) {
      var filter1, filter2, gain, osc;
      if (volume == null) {
        volume = 0.2;
      }
      gain = this.context.createGainNode();
      filter1 = this.context.createBiquadFilter();
      filter2 = this.context.createBiquadFilter();
      osc = this.context.createOscillator();
      osc.type = this.osc_type;
      osc.frequency.value = LC.NOTES[note];
      LC.LEnv(gain.gain, time, length, 0, volume, 0.01, this.decay, 0, 0);
      LC.LEnv(filter1.frequency, time, length, this.flt_f, this.flt_f + this.flt_mod, 0.01, this.decay, 0, 0);
      LC.LEnv(filter2.frequency, time, length, this.flt_f, this.flt_f + this.flt_mod, 0.01, this.decay, 0, 0);
      filter1.Q.value = this.Q;
      filter2.Q.value = this.Q;
      osc.connect(filter1);
      filter1.connect(filter2);
      filter2.connect(gain);
      gain.connect(destination);
      osc.noteOn(time);
      return osc.noteOff(time + length);
    };

    return AcidSynth;

  })();

  BassSynth = (function() {

    function BassSynth(context) {
      var helposc;
      this.context = context;
      helposc = this.context.createOscillator();
      this.SAWTOOTH = helposc.SAWTOOTH;
      this.SINE = helposc.SINE;
      this.SQUARE = helposc.SQUARE;
      this.TRIANGLE = helposc.TRIANGLE;
      this.spread = 10;
      this.osc_type = this.SAWTOOTH;
      this.amp_a = 0.01;
      this.amp_d = 0.1;
      this.amp_s = 0.8;
      this.amp_r = 0.1;
      this.flt_a = 0.01;
      this.flt_d = 0.1;
      this.flt_s = 0.8;
      this.flt_r = 0.01;
      this.flt_f = 500;
      this.flt_env = 2000;
      this.flt_Q = 10;
    }

    BassSynth.prototype.play = function(destination, time, length, note, volume) {
      var filter, gain, osc1, osc2;
      if (volume == null) {
        volume = 0.2;
      }
      gain = this.context.createGainNode();
      filter = this.context.createBiquadFilter();
      osc1 = this.context.createOscillator();
      osc2 = this.context.createOscillator();
      osc1.type = this.osc_type;
      osc2.type = this.osc_type;
      osc1.detune.value = this.spread;
      osc2.detune.value = this.spread * -1;
      osc1.frequency.value = LC.NOTES[note];
      osc2.frequency.value = LC.NOTES[note];
      LC.LEnv(gain.gain, time, length, 0, volume, this.amp_a, this.amp_d, this.amp_s, this.amp_r);
      LC.LEnv(filter.frequency, time, length, this.flt_f, this.flt_f + this.flt_env, this.flt_a, this.flt_d, this.flt_s, this.flt_r);
      filter.Q.value = this.flt_Q;
      osc1.connect(filter);
      osc2.connect(filter);
      filter.connect(gain);
      gain.connect(destination);
      osc1.noteOn(time);
      osc2.noteOn(time);
      osc1.noteOff(time + length);
      return osc2.noteOff(time + length);
    };

    return BassSynth;

  })();

  Reverb = (function() {

    function Reverb(context) {
      this.context = context;
      this.destination = context.createGainNode();
      this.destination.gain.value = 1.0;
      this.mixer = context.createGainNode();
      this.mixer.gain.value = 0.5;
      this.convolver = context.createConvolver();
      this.convolver.connect(this.mixer);
      this.convolver.buffer = LC.S.ir_t600.buffer;
      this.destination.connect(this.convolver);
      this.mix = this.mixer.gain;
    }

    Reverb.prototype.buffer = function(buffer) {
      if (this.convolver.buffer !== buffer) {
        return this.convolver.buffer = buffer;
      }
    };

    Reverb.prototype.connect = function(dest) {
      this.mixer.connect(dest);
      return this.destination.connect(dest);
    };

    return Reverb;

  })();

  Delay = (function() {

    function Delay(context) {
      var delay, fbFilter, fbGain;
      this.context = context;
      this.destination = context.createGainNode();
      this.destination.gain = 1.0;
      fbGain = context.createGainNode();
      fbGain.gain.value = 0.6;
      fbFilter = context.createBiquadFilter();
      fbFilter.type = fbFilter.HIGHPASS;
      fbFilter.frequency.value = 4000.0;
      fbFilter.Q.value = 2.0;
      delay = context.createDelay(10);
      delay.delayTime.value = 0.6;
      this.outGain = context.createGainNode();
      this.outGain.gain.value = 0.4;
      this.destination.connect(delay);
      delay.connect(this.outGain);
      delay.connect(fbFilter);
      fbFilter.connect(fbGain);
      fbGain.connect(delay);
      this.feedback = fbGain.gain;
      this.delayTime = delay.delayTime;
      this.filterFrequency = fbFilter.frequency;
      this.output = this.outGain.gain;
    }

    Delay.prototype.connect = function(dest) {
      this.outGain.connect(dest);
      return this.destination.connect(dest);
    };

    return Delay;

  })();

  ImageList = (function() {

    ImageList.prototype.imageLocations = {
      'badge': 'images/moz-shadow-badge.png'
    };

    function ImageList() {
      var name, url, _ref;
      _ref = this.imageLocations;
      for (name in _ref) {
        url = _ref[name];
        this[name] = new Image();
        this[name].src = url;
      }
    }

    return ImageList;

  })();

  SampleList = (function() {

    SampleList.prototype.sampleLocations = {
      'amen': 'audio/amen_low.wav',
      'dub_base': 'audio/dub-base.wav',
      'dub_hhcl': 'audio/dub-hhcl.wav',
      'dub_clapsnare': 'audio/dub-clapsnare.wav',
      'ir_t600': 'audio/t600.wav',
      'p_klang': 'audio/klang.wav',
      'p_koki': 'audio/koki.wav',
      'p_tom': 'audio/tom.wav',
      't_base': 'audio/t_base.wav',
      't_snare': 'audio/t_snare.wav',
      't_clap': 'audio/t_clap.wav',
      't_hhcl': 'audio/t_hhcl.wav',
      't_hhop': 'audio/t_hhop.wav',
      't_ride': 'audio/t_ride.wav',
      't_crash': 'audio/t_crash.wav'
    };

    function SampleList(audioContext, completeCallback) {
      this.loadedCallback = __bind(this.loadedCallback, this);

      var name, url, _ref;
      this.context = audioContext;
      this.callback = completeCallback;
      _ref = this.sampleLocations;
      for (name in _ref) {
        url = _ref[name];
        this[name] = new Sample(audioContext, url, this.loadedCallback);
      }
    }

    SampleList.prototype.loadedCallback = function() {
      var all_loaded, name, url, _ref;
      all_loaded = true;
      _ref = this.sampleLocations;
      for (name in _ref) {
        url = _ref[name];
        all_loaded && (all_loaded = this[name].loaded);
      }
      if (all_loaded) {
        return this.callback();
      }
    };

    return SampleList;

  })();

  Sample = (function() {

    function Sample(audioContext, url, loadedCallback) {
      this.onDecodingError = __bind(this.onDecodingError, this);

      this.onDecode = __bind(this.onDecode, this);

      this.decode = __bind(this.decode, this);

      this.load = __bind(this.load, this);
      this.context = audioContext;
      this.url = url;
      this.loaded = false;
      this.error = null;
      this.load();
      this.callback = loadedCallback;
    }

    Sample.prototype.load = function() {
      this.request = new XMLHttpRequest();
      this.request.open("GET", this.url, true);
      this.request.responseType = "arraybuffer";
      this.request.onload = this.decode;
      return this.request.send();
    };

    Sample.prototype.decode = function() {
      return this.context.decodeAudioData(this.request.response, this.onDecode, this.onDecodingError);
    };

    Sample.prototype.onDecode = function(buffer) {
      this.buffer = buffer;
      this.loaded = true;
      return this.callback(this.url);
    };

    Sample.prototype.onDecodingError = function(error) {
      console.log("error decoding", this.url, error);
      return this.error = error;
    };

    Sample.prototype.makeBufferSource = function(o, r, g) {
      var gain, player;
      player = this.context.createBufferSource(this.buffer);
      player.buffer = this.buffer;
      player.playbackRate.value = r;
      gain = this.context.createGainNode();
      gain.gain.value = g;
      player.connect(gain);
      gain.connect(o);
      return player;
    };

    Sample.prototype.play = function(o, t, l, r, g) {
      var player;
      if (r == null) {
        r = 1.0;
      }
      if (g == null) {
        g = 1.0;
      }
      if (!this.loaded) {
        return;
      }
      player = this.makeBufferSource(o, r, g);
      player.noteOn(t);
      return player.noteOff(t + l);
    };

    Sample.prototype.playShot = function(o, t, r, g) {
      var player;
      if (r == null) {
        r = 1.0;
      }
      if (g == null) {
        g = 1.0;
      }
      if (!this.loaded) {
        return;
      }
      player = this.makeBufferSource(o, r, g);
      return player.noteOn(t);
    };

    Sample.prototype.playGrain = function(o, t, offset, l, r, g) {
      var player;
      if (r == null) {
        r = 1.0;
      }
      if (g == null) {
        g = 1.0;
      }
      if (!this.loaded) {
        return;
      }
      player = this.makeBufferSource(o, r, g);
      return player.noteGrainOn(t, offset, l);
    };

    return Sample;

  })();

  State = (function() {

    function State() {
      this.init = __bind(this.init, this);

    }

    State.prototype.init = function(k, v) {
      if (!(this[k] != null)) {
        return this[k] = v;
      }
    };

    return State;

  })();

  new Lawnchair({
    name: 'livecoder',
    adapter: 'dom'
  }, function(db) {
    return LC.LiveCoder = (function() {

      function LiveCoder(editor, canvas, keylist) {
        this.audioRunLoop = __bind(this.audioRunLoop, this);

        this.removeMessage = __bind(this.removeMessage, this);

        this.displayMessage = __bind(this.displayMessage, this);

        this.postSampleInit = __bind(this.postSampleInit, this);

        this.canvasRunLoop = __bind(this.canvasRunLoop, this);

        this.keydown = __bind(this.keydown, this);

        this.reload = __bind(this.reload, this);

        this.activate = __bind(this.activate, this);

        this.deactivate = __bind(this.deactivate, this);
        this.$el = $(editor);
        this.$canvas = $(canvas);
        this.$keylist = $(keylist);
        this.drawMethod = null;
        this.oldDrawMethod = null;
        this.patternMethod = null;
        this.oldPatternMethod = null;
        this.deactTimeout = null;
        this.state = new State();
        this.initEditor();
        this.initCanvas();
        this.initAudio();
        this.updateKeyList();
      }

      LiveCoder.prototype.initEditor = function() {
        var _this = this;
        this.editor = ace.edit("editor");
        this.editor.setTheme("ace/theme/monokai");
        this.editor.getSession().setMode("ace/mode/javascript");
        this.editor.container.addEventListener("keydown", this.keydown, true);
        this.editor.on('focus', this.activate);
        this.load('default');
        this.$keylist.on('click', "li[data-action='hide']", function(e) {
          _this.$keylist.toggleClass('hidden');
          return _this.editor.focus();
        });
        return this.$keylist.on('click', 'li[data-key]', function(e) {
          return _this.load($(e.target).data('key'));
        });
      };

      LiveCoder.prototype.load = function(key) {
        var _this = this;
        return db.get(key, function(data) {
          if (data) {
            _this.editor.setValue(data.code);
            return _this.editor.focus();
          }
        });
      };

      LiveCoder.prototype.updateKeyList = function() {
        var _this = this;
        this.$keylist.html("<li data-action='hide'>&lt;&lt;&lt;</li>");
        return db.keys(function(keys) {
          return keys.forEach(function(key) {
            return _this.$keylist.append("<li data-key='" + key + "'>" + key + "</li>");
          });
        });
      };

      LiveCoder.prototype.save = function() {
        var code, group, name;
        code = this.editor.getValue();
        group = code.match(/NAME: {0,1}([\w _\-]+)?\n/);
        if (group) {
          name = group[1];
        } else {
          name = "foobar_" + (Math.round(Math.random() * 1000));
        }
        db.save({
          key: name,
          code: code
        });
        return this.updateKeyList();
      };

      LiveCoder.prototype.deactivate = function() {
        return this.$el.removeClass('active');
      };

      LiveCoder.prototype.activate = function() {
        this.$el.addClass('active');
        if (this.deactTimeout) {
          clearTimeout(this.deactTimeout);
        }
        this.deactTimeout = setTimeout(this.deactivate, 4000);
        return true;
      };

      LiveCoder.prototype.reload = function() {
        var code;
        this.save();
        code = this.editor.getValue();
        try {
          eval(code);
          if (this.drawMethod) {
            this.oldDrawMethod = this.drawMethod;
          }
          if (draw) {
            this.drawMethod = draw;
          }
          if (this.patternMethod) {
            this.oldPatternMethod = this.patternMethod;
          }
          if (pattern) {
            return this.patternMethod = pattern;
          }
        } catch (exception) {
          return console.log(exception);
        }
      };

      LiveCoder.prototype.keydown = function(e) {
        if (e.metaKey || e.altKey) {
          if (e.keyCode === 13) {
            this.reload();
          }
          if (e.keyCode === 83) {
            e.preventDefault();
            this.save();
          } else {
            console.log(e);
          }
        }
        return this.activate();
      };

      LiveCoder.prototype.initCanvas = function() {
        var _this = this;
        $(window).bind('resize', function() {
          _this.$canvas.width(window.innerWidth).height(window.innerHeight);
          _this.$canvas[0].width = window.innerWidth;
          _this.$canvas[0].height = window.innerHeight;
          _this.context.width = _this.$canvas.width();
          return _this.context.height = _this.$canvas.height();
        });
        this.context = this.$canvas[0].getContext('2d');
        this.$canvas[0].width = window.innerWidth;
        this.$canvas[0].height = window.innerHeight;
        this.context.width = this.$canvas.width();
        this.context.height = this.$canvas.height();
        this.context.font = "bold 200px 'Courier New'";
        LC.I = new ImageList();
        return this.canvasRunLoop();
      };

      LiveCoder.prototype.canvasRunLoop = function() {
        var analyserData;
        if (this.drawMethod) {
          analyserData = new Uint8Array(16);
          this.analyser.getByteFrequencyData(analyserData);
          try {
            this.drawMethod(this.context, this.state, analyserData);
          } catch (exception) {
            console.log(exception);
            if (this.oldDrawMethod) {
              this.drawMethod = this.oldDrawMethod;
              this.drawMethod(this.context, this.state, analyserData);
            }
          }
        }
        return requestAnimationFrame(this.canvasRunLoop);
      };

      LiveCoder.prototype.initAudio = function() {
        this.tempo = 120;
        this.steps = 16;
        this.groove = 0;
        this.audioContext = new webkitAudioContext();
        LC.S = new SampleList(this.audioContext, this.postSampleInit);
        this.analyser = this.audioContext.createAnalyser();
        this.analyser.fftSize = 64;
        this.analyser.smoothingTimeConstant = 0.5;
        this.analyser.minDecibels = -100;
        this.analyser.maxDecibels = -40;
        this.masterGain = this.audioContext.createGainNode();
        this.masterGain.gain.value = 0.5;
        this.masterGain.connect(this.audioContext.destination);
        this.masterGain.connect(this.analyser);
        this.masterCompressor = this.audioContext.createDynamicsCompressor();
        this.masterCompressor.connect(this.masterGain);
        this.tuna = new Tuna(this.audioContext);
        LC.Tuna = this.tuna;
        LC.DelayLine = new Delay(this.audioContext);
        LC.DelayLine.connect(this.masterGain);
        LC.BassSynth = new BassSynth(this.audioContext);
        LC.AcidSynth = new AcidSynth(this.audioContext);
        this.masterOutlet = this.masterCompressor;
        return this.nextPatternTime = 0;
      };

      LiveCoder.prototype.postSampleInit = function() {
        LC.ReverbLine = new Reverb(this.audioContext);
        LC.ReverbLine.connect(this.masterGain);
        return this.audioRunLoop();
      };

      LiveCoder.prototype.displayMessage = function(message) {
        if ($('.message').length === 0) {
          $('body').append($("<div class='message'></div>"));
        }
        $('.message').append("<p>" + message + "</p>");
        return setTimeout(this.removeMessage, 5000);
      };

      LiveCoder.prototype.removeMessage = function() {
        if ($('.message p').length > 1) {
          return $('.message p:first-child').remove();
        } else {
          return $('.message').remove();
        }
      };

      LiveCoder.prototype.audioRunLoop = function() {
        var i, stepTimes;
        this.timePerStep = 60 / (4 * this.tempo);
        if (this.nextPatternTime === 0 || this.nextPatternTime - this.audioContext.currentTime < 0.4) {
          if (this.nextPatternTime === 0) {
            this.nextPatternTime = this.audioContext.currentTime;
          }
          if (this.patternMethod) {
            stepTimes = (function() {
              var _i, _ref, _results;
              _results = [];
              for (i = _i = 0, _ref = this.steps; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                _results.push(this.nextPatternTime + (this.timePerStep * i + (i % 2 === 0 ? 0 : this.groove * this.timePerStep)));
              }
              return _results;
            }).call(this);
            try {
              this.patternMethod(this.audioContext, this.masterOutlet, stepTimes, this.timePerStep, this.state);
            } catch (e) {
              console.log(e);
              if (this.oldPatternMethod) {
                this.patternMethod = this.oldPatternMethod;
                this.patternMethod(this.audioContext, this.masterOutlet, stepTimes, this.timePerStep, this.state);
              }
            }
          }
          this.nextPatternTime += this.steps * this.timePerStep;
        }
        return setTimeout(this.audioRunLoop, 100);
      };

      return LiveCoder;

    })();
  });

}).call(this);
